generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.VarChar(1000)
  access_token      String? @db.VarChar(1000)
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_User_id_fk")

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Discount {
  id                  BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  discountStatus      Int
  discountType        Int
  discountValue       Int
  discountLimit       Int?
  discountCode        String
  discountAmount      Int?
  discountCoverage    Int?     @default(0)
  discountCreated     DateTime @default(now())
  discountCreatedBy   BigInt   @db.UnsignedBigInt
  discountDeleted     DateTime
  discountDeletedBy   BigInt   @db.UnsignedBigInt
  discountDescription String
  discountEndDate     DateTime
  discountName        String
  discountStartDate   DateTime
  discountUpdated     DateTime
  discountUpdatedBy   BigInt   @db.UnsignedBigInt
}

model Example {
  id        String   @id @default(cuid())
  name      String   @default("example")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                  BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  productName         String
  productPrice        Int
  productImage        String
  productStatus       Int
  productCreated      DateTime         @default(now())
  productUpdated      DateTime         @updatedAt
  productDeleted      DateTime?
  productDeletedBy    Int?
  productCreatedBy    Int?
  productUpdatedBy    Int?
  productCategory     Int
  productSuggestPrice Int?
  rating              Int?
  productDescription  String?          @db.Text
  productDetails      Json?
  productCategorys    ProductCategory  @relation(fields: [productCategory], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Product_ProductCategory_id_fk")
  ProductImages       ProductImages[]
  ProductDetails      ProductDetails[]
  ProductColor        ProductColor[]

  @@index([productCategory], map: "Product_ProductCategory_id_fk")
}

model ProductImages {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  productId BigInt  @db.UnsignedBigInt
  name      String?
  src       String?
  alt       String?
  product   Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductImage_Product_id_fk")
}

model ProductDetails {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  productId BigInt  @db.UnsignedBigInt
  name      String?
  items     Json?
  product   Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductDetails_Product_id_fk")
}

model ProductCategory {
  id                    Int       @id @default(autoincrement())
  productCategoryName   String
  productCategoryLabel  String?
  productCategoryDesc   String?
  productCategoryImg    String?
  productCategoryStat   Int?
  productCategoryCrtd   DateTime  @default(now())
  productCategoryUpdt   DateTime  @updatedAt
  productCategoryDelt   DateTime?
  productCategoryDeltBy Int?
  productCategoryCrtdBy Int?
  productCategoryUpdtBy Int?
  Product               Product[]
}

model Role {
  id       Int    @id @default(autoincrement())
  roleName String
  User     User[]
}

model Session {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model SiteSetting {
  id                Int      @id @default(autoincrement())
  siteSettingName   String
  siteSettingDesc   String
  siteSettingImg    String
  siteSettingStatus Int
  moneyAPIType      Int?
  siteSettingCrtd   DateTime @default(now())
  siteSettingUpdt   DateTime
  siteSettingDelt   DateTime
  siteSettingDeltBy BigInt   @db.UnsignedBigInt
  siteSettingCrtdBy BigInt   @db.UnsignedBigInt
  siteSettingUpdtBy BigInt   @db.UnsignedBigInt

  @@index([siteSettingCrtdBy], map: "SiteSetting_siteSettingCrtdBy_fkey")
}

model SiteStyle {
  id              Int       @id @default(autoincrement())
  siteStyleName   String
  siteStyleDesc   String
  siteStyleImg    String
  siteStyleStatus Int
  siteStyleCrtd   DateTime  @default(now())
  siteStyleUpdt   DateTime  @updatedAt
  siteStyleDelt   DateTime?
  siteStyleDeltBy Int?
  siteStyleCrtdBy Int?
  siteStyleUpdtBy Int?
}

model User {
  /// This comment will get attached to the `id` node in the AST
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  userAddress   String?
  userCreated   DateTime  @default(now())
  userDeleted   DateTime?
  userFirstName String?
  userLastName  String?
  userPhone     String?
  userBirthday  DateTime? @db.Date
  userStatus    Int       @default(1)
  userUpdated   DateTime  @updatedAt
  userRole      Int       @default(1)
  businessId    BigInt?   @db.UnsignedBigInt
  Account       Account[]
  Session       Session[]
  Business      Business? @relation(fields: [businessId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "User_Business_id_fk")
  Role          Role      @relation(fields: [userRole], references: [id], onDelete: Cascade)
  Order         Order[]

  @@index([userRole], map: "User_userRole_fkey")
  @@index([businessId], map: "User_Business_id_fk")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Business {
  id   BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  name String?
  User User[]
}

model Order {
  id       BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  orderId  String    @unique
  detail   Json?
  time     DateTime  @default(now())
  total    Int       @default(0)
  shipping Int       @default(0)
  userId   Int
  prime    String
  name     String
  phone    String
  email    String
  address  String
  payment  String
  invoiceHref String @default("#")
  user     User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Order_User_id_fk")
  status   Int?
}

model ProductVariant {
  id          Int  @id @default(autoincrement())
  productId   Int?
  column_name Int?
}

model ProductColor {
  id            BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  name          String?
  bgColor       String?
  selectedColor String?
  image         String?
  productId     BigInt  @db.UnsignedBigInt
  product       Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ProductColor_Product_id_fk")
}
model Style {
    id          Int  @id @default(autoincrement())
    name        String?
    detail      Json?
    rawcss      String? @db.Text
    }
